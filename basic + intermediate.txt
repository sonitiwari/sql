-- Returns first 100 rows from tutorial.crunchbase_investments
  SELECT * FROM tutorial.crunchbase_investments LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_companies
  SELECT * FROM tutorial.crunchbase_companies LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_investments
  SELECT * FROM tutorial.crunchbase_investments LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_companies
  SELECT * FROM tutorial.crunchbase_companies LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_investments
  SELECT * FROM tutorial.crunchbase_investments LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_investments
  SELECT 
		company_permalink,
		company_name,
		company_category_code,
		company_country_code,
		company_state_code,
		company_region,
		company_city,
		investor_permalink,
		investor_name,
		investor_category_code,
		investor_country_code,
		investor_state_code,
		investor_region,
		investor_city,
		funding_round_type,
		funded_at,
		funded_month,
		funded_quarter,
		funded_year,
		raised_amount_usd,
		id
 FROM tutorial.crunchbase_investments LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_acquisitions
  SELECT * FROM tutorial.crunchbase_acquisitions LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_acquisitions
  SELECT * FROM tutorial.crunchbase_acquisitions LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_companies
  SELECT * FROM tutorial.crunchbase_companies LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_companies
  SELECT * FROM tutorial.crunchbase_companies LIMIT 100;

-- Returns first 100 rows from tutorial.crunchbase_companies
  SELECT * FROM tutorial.crunchbase_companies LIMIT 100;

-- Returns first 100 rows from benn.college_football_teams
  SELECT * FROM benn.college_football_teams LIMIT 100;

-- Returns first 100 rows from benn.college_football_teams
  SELECT * FROM benn.college_football_teams LIMIT 100;

INTERMEDITE Problem:-

SELECT * FROM tutorial.aapl_historical_stock_price

SELECT COUNT(*)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT COUNT(high)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT COUNT(date)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT COUNT(date) AS count_of_date
  FROM tutorial.aapl_historical_stock_price
  
  
  SELECT Max(close-open)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT SUM(low)
  FROM tutorial.aapl_historical_stock_price
  
  
  SELECT Max(volume)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT Min(low)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT MIN(volume) AS min_volume,
       MAX(volume) AS max_volume
  FROM tutorial.aapl_historical_stock_price
  
  
  SELECT AVG(high)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT AVG(volume)
  FROM tutorial.aapl_historical_stock_price
  
  SELECT year,
 COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year
 
 SELECT year,month,
       COUNT(*) 
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 
SELECT year,
       month,
       SUM(volume) AS volume_sum
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 ORDER BY year, month
        
SELECT year,
       month,
       MAX(high) AS month_high
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
HAVING MAX(high) > 500

SELECT * FROM benn.college_football_players

SELECT player_name,
       year,
       CASE WHEN year = 'SR' THEN 'no'
            ELSE NULL END AS senior1
  FROM benn.college_football_players
  
  
   SELECT PLAYER_NAME,STATE,  CASE WHEN STATE ='CA' THEN 'yes'  ELSE NULL END AS HOMEstatus 
  FROM benn.college_football_players
  ORDER BY 3
  
  SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 THEN '201-250'
            WHEN weight > 175 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players
  ORDER BY 3 DESC
  
  SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 AND weight <= 250 THEN '201-250'
            WHEN weight > 175 AND weight <= 200 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players
 
 SELECT player_name,height,
     CASE WHEN height>5 THEN 'Long'
     WHEN height>=3 and height<=5 THEN 'MEDIUM'
     ELSE '2 or under' END AS height_group
  FROM benn.college_football_players
  
  
  SELECT * ,
    CASE WHEN year='SR' THEN 'senior'
    ELSE 'Junior' END as status
  FROM benn.college_football_players
  
  SELECT *,
       CASE WHEN year IN ('JR', 'SR') THEN player_name ELSE NULL END AS upperclass_player_name
  FROM benn.college_football_players
  
  
  SELECT CASE WHEN year = 'FR' THEN 'FR'
            ELSE 'Not FR' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY CASE WHEN year = 'FR' THEN 'FR'
               ELSE 'Not FR' END
               
               
  SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1
  
  
  SELECT CASE WHEN state IN('CA','OR','WA') THEN 'west_coast'
     WHEN state='TX' Then 'texas'
     ELSE 'other' END as regional_area,
     COUNT(1) AS player
  FROM benn.college_football_players
  WHERE weight>300
  GROUP BY 1
  
  SELECT CASE WHEN year IN('FR','SO') THEN 'underclass_player'
    WHEN year IN('JR','SR') THEN 'upperclass_player'
    ELSE NULL END as player_class,
    COUNT(1) AS count
  FROM benn.college_football_players
  WHERE state='CA'
  GROUP BY 1
  
  
  SELECT CASE WHEN 
  
   SELECT CASE WHEN year IN('FR','SO') THEN 'underclass_player'
    WHEN year IN('JR','SR') THEN 'upperclass_player'
    ELSE NULL END as player_class,
    SUM(weight) AS combined_player_weight
  FROM benn.college_football_players
  WHERE state='CA'
  GROUP BY 1
  
  SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1
 
 SELECT COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count
  FROM benn.college_football_players
  
  SELECT COUNT(CASE WHEN year='FR' THEN 1 ELSE NULL END) AS FR_count,
         COUNT(CASE WHEN year='SO' THEN 1 ELSE NULL END) AS so_count,
         COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
         COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
         COUNT(1) AS count
  FROM benn.college_football_players
  GROUP BY state
  ORDER BY count DESC
  
  SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1
  ORDER BY  school_name_group ASC
  
  
  SELECT DISTINCT month
  FROM tutorial.aapl_historical_stock_price
  
  SELECT DISTINCT year 
  FROM tutorial.aapl_historical_stock_price
  ORDER BY year 
  
  SELECT COUNT(DISTINCT month) AS unique_months
  FROM tutorial.aapl_historical_stock_price
  
  SELECT month,
       AVG(volume) AS avg_trade_volume
  FROM tutorial.aapl_historical_stock_price
 GROUP BY month
 ORDER BY 1 DESC
 
 
 SELECT count (DISTINCT year) as year ,COUNT(DISTINCT month) as months
FROM tutorial.aapl_historical_stock_price

/////////////////////JOIN/////////////////

SELECT teams.conference AS conference,
       AVG(players.weight) AS average_weight
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
 GROUP BY teams.conference
 ORDER BY AVG(players.weight) DESC


SELECT school_name AS school,player_name AS player ,position AS pos ,weight AS weights
FROM benn.college_football_players P 
WHERE state= 'GA'
ORDER BY weights DESC


SELECT players.school_name,
       players.player_name,
       players.position,
       players.weight
  FROM benn.college_football_players players
 WHERE players.state = 'GA'
 ORDER BY players.weight DESC
 
 SELECT players.player_name,
    players.school_name ,
    teams.conference 
   FROM benn.college_football_players players 
   JOIN benn.college_football_teams teams 
  ON teams.school_name = players.school_name
  WHERE teams.division='FBS ( DIVISON I-A Teams)'
  
  SELECT players.player_name,
       teams.school_name,
       teams.conference
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
 WHERE teams.division = 'FBS (Division I-A Teams)'
        
        
  
  SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    
    
  SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    
  SELECT notnull*
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
   ON companies.permalink = acquisitions.company_permalink
  
  
  SELECT COUNT(companies.permalink) AS companies_rowcount,
       COUNT(acquisitions.company_permalink) AS acquisitions_rowcount
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    
    
  SELECT companies.permalink,
       companies.name,
       companies.status,
       COUNT(investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
   AND investments.funded_year > companies.founded_year + 5
 GROUP BY 1,2, 3
 
 SELECT  companies.permalink,
       companies.name,
       companies.status,
       COUNT(investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
 WHERE investments.funded_year > companies.founded_year + 5
 GROUP BY 1,2, 3
    
  
  
  SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_acquisitions acquisitions
 RIGHT JOIN tutorial.crunchbase_companies companies
    ON companies.permalink = acquisitions.company_permalink
  
  
  SELECT companies.state_code,
  COUNT( companies.permalink) AS companies_permalink,
      COUNT(acquisitions.company_permalink) AS acquisitions_permalink
   FROM tutorial.crunchbase_acquisitions acquisitions
 RIGHT JOIN tutorial.crunchbase_companies companies
    ON companies.permalink = acquisitions.company_permalink
    WHERE companies.state_code is NOT NULL
    GROUP BY companies.state_code
  ORDER by 3 DESC
  
 
 SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS unique_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS acquired_companies
  FROM tutorial.crunchbase_acquisitions acquisitions
 RIGHT JOIN tutorial.crunchbase_companies companies
    ON companies.permalink = acquisitions.company_permalink
 WHERE companies.state_code IS NOT NULL
 GROUP BY 1
 ORDER BY 3 DESC
 
 SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
 ORDER BY 1
 

  SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
   AND acquisitions.company_permalink != '/company/1000memories'
 ORDER BY 1
 
 SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
 WHERE acquisitions.company_permalink != '/company/1000memories'
    OR acquisitions.company_permalink IS NULL
 ORDER BY 1
 
 SELECT * FROM tutorial.crunchbase_investments
 
 
SELECT companies.name AS company_name,
       companies.status,
       COUNT(DISTINCT investments.investor_name) AS unqiue_investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 WHERE companies.state_code = 'NY'
 GROUP BY 1,2
 ORDER BY 3 DESC
 
SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
            ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
    GROUP BY 1
 ORDER BY 2 DESC
 
 SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND acquisitions.company_permalink IS NULL
                  THEN companies.permalink ELSE NULL END) AS companies_only,
       COUNT(CASE WHEN companies.permalink IS NOT NULL AND acquisitions.company_permalink IS NOT NULL
                  THEN companies.permalink ELSE NULL END) AS both_tables,
       COUNT(CASE WHEN companies.permalink IS NULL AND acquisitions.company_permalink IS NOT NULL
                  THEN acquisitions.company_permalink ELSE NULL END) AS acquisitions_only
  FROM tutorial.crunchbase_companies companies
  FULL JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    
    SELECT *
  FROM tutorial.crunchbase_investments_part1

 UNION

 SELECT *
   FROM tutorial.crunchbase_investments_part2
    
   SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL
                      THEN companies.permalink ELSE NULL END) AS companies_only,
           COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL
                      THEN companies.permalink ELSE NULL END) AS both_tables,
           COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL
                      THEN investments.company_permalink ELSE NULL END) AS investments_only
      FROM tutorial.crunchbase_companies companies
      FULL JOIN tutorial.crunchbase_inv
        ON companies.permalink = investments.company_permalink
        estments_part1 investments
        
 SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part1
 WHERE company_name ILIKE 'T%'
 
 UNION ALL

SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part2
 WHERE company_name ILIKE 'M%'
 
 SELECT 'investments_part1' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2

 UNION ALL
 
 SELECT 'investments_part2' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part2 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2